{"version":3,"sources":["assets/Frame.png","assets/happy_couple.jpg","components/ImageCropModal/ImageCropModal.js","App.js","api/api.js","serviceWorker.js","index.js"],"names":["module","exports","customStyles","content","width","height","zIndex","top","left","right","bottom","marginRight","transform","Modal","setAppElement","ImageCropModal","useContext","AppContext","modalIsOpen","setModalIsOpen","setBackImage","useState","result","filename","filetype","src","error","state","setstate","isOpen","style","className","onClick","onChange","value","cropperOptions","aspectRatio","createContext","App","firstname","setfirstname","secondname","setsecondname","percentage","setpercentage","couple","backImage","calculate","axios","method","url","headers","process","params","fname","sname","then","response","data","catch","calcByNames","res","Provider","placeholder","e","target","id","window","location","origin","frame","alt","html2canvas","document","querySelector","canvas","toBlob","blob","saveAs","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.6d290df8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Frame.34649f60.png\";","module.exports = __webpack_public_path__ + \"static/media/happy_couple.8755ed8a.jpg\";","import React, { useState, useContext } from \"react\";\nimport Modal from \"react-modal\";\nimport \"./ImageCropModal.scss\";\nimport DropNCrop from \"@synapsestudios/react-drop-n-crop\";\nimport \"@synapsestudios/react-drop-n-crop/lib/react-drop-n-crop.min.css\";\nimport { AppContext } from \"../../App\";\n\nconst customStyles = {\n  content: {\n    width: \"90%\",\n    height: \"90%\",\n    zIndex: \"50\",\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\"\n  }\n};\n\nModal.setAppElement(\"#root\");\n\nfunction ImageCropModal() {\n  const { modalIsOpen, setModalIsOpen, setBackImage } = useContext(AppContext);\n\n  const [state, setstate] = useState({\n    result: null,\n    filename: null,\n    filetype: null,\n    src: null,\n    error: null\n  });\n\n  const onChange = value => {\n    setstate(value);\n  };\n\n  return (\n    <Modal isOpen={modalIsOpen} style={customStyles}>\n      <button className=\"close-modal\" onClick={() => setModalIsOpen(false)}>\n        X\n      </button>\n      <DropNCrop\n        onChange={onChange}\n        value={state}\n        cropperOptions={{ aspectRatio: 1 / 1 }}\n      />\n      <button\n        className=\"save-image\"\n        onClick={() => {\n          setModalIsOpen(false);\n          setBackImage(state.result);\n          setstate({\n            result: null,\n            filename: null,\n            filetype: null,\n            src: null,\n            error: null\n          });\n        }}\n      >\n        Sacuvaj sliku\n      </button>\n    </Modal>\n  );\n}\n\nexport default ImageCropModal;\n","import React, { useState, createContext } from \"react\";\nimport frame from \"./assets/Frame.png\";\nimport couple from \"./assets/happy_couple.jpg\";\nimport \"./App.scss\";\n// Components\nimport ImageCropModal from \"./components/ImageCropModal/ImageCropModal\";\n// Libs\nimport html2canvas from \"html2canvas\";\nimport { saveAs } from \"file-saver\";\n// Api\nimport { calcByNames } from \"./api/api\";\n// Context\nexport const AppContext = createContext({});\n\n\nfunction App() {\n  const [firstname, setfirstname] = useState(\"\");\n  const [secondname, setsecondname] = useState(\"\");\n  const [percentage, setpercentage] = useState(\"\");\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [backImage, setBackImage] = useState(couple);\n\n  const calculate = () => {\n    calcByNames(firstname, secondname).then(res => {\n      setpercentage(res.percentage);\n    });\n  };\n\n  const saveImage = () => {\n    html2canvas(document.querySelector(\"#image-frame\")).then(function(canvas) {\n      canvas.toBlob(blob => {\n        saveAs(blob, `${firstname}+${secondname}`);\n      });\n    });\n  };\n\n  return (\n    <AppContext.Provider\n      value={{\n        modalIsOpen: modalIsOpen,\n        setModalIsOpen: setModalIsOpen,\n        setBackImage: setBackImage\n      }}\n    >\n      <>\n        <ImageCropModal />\n\n        <div className=\"app\">\n          <div className=\"input-text\">\n            <h1>Okvir Ljubavi</h1>\n            <h5>\n              Pripremili smo zabavan ljubavni test, koji koristeći numerologiju\n              računa koliko ste kompatibilni i stvoreni jedno za drugo. I sve to\n              na osnovu vaših imena!\n            </h5>\n            <input\n              placeholder=\"Tvoje ime\"\n              value={firstname}\n              onChange={e => setfirstname(e.target.value)}\n            />\n            <input\n              placeholder=\"Njegovo / Njeno ime\"\n              value={secondname}\n              onChange={e => setsecondname(e.target.value)}\n            />\n            <button onClick={() => calculate()}>Izračunaj</button>\n          </div>\n          <div className=\"output-frame\">\n            <div id=\"image-frame\">\n              <div className=\"result\">\n                {percentage && <h3>{percentage}%</h3>}\n                <h6>{window.location.origin}</h6>\n              </div>\n\n              <img className=\"image-frame\" src={frame} alt=\"frame\" />\n              <div className=\"image-back\">\n                <img src={backImage ? backImage : couple} alt=\"couple\" />\n              </div>\n            </div>\n            <button onClick={() => setModalIsOpen(true)}>\n              Ubaci Svoju Sliku\n            </button>\n            <button onClick={() => saveImage()}>Sačuvaj Sliku</button>\n          </div>\n        </div>\n      </>\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","import axios from 'axios'\n\nexport const calcByNames = (firstname, secondname) => {\n  const result = axios({\n    method: \"GET\",\n    url: \"https://love-calculator.p.rapidapi.com/getPercentage\",\n    headers: {\n      \"content-type\": \"application/octet-stream\",\n      \"x-rapidapi-host\": \"love-calculator.p.rapidapi.com\",\n      \"x-rapidapi-key\": process.env.REACT_APP_API_KEY\n    },\n    params: {\n      fname: firstname,\n      sname: secondname\n    }\n  })\n    .then(response => {\n      return response.data\n    })\n    .catch(error => {\n      return error\n    });\n\n    return result\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}